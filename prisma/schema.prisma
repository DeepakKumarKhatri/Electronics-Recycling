generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  USER
  ADMIN
}

model User {
  id            Int             @id @default(autoincrement())
  fullName      String?
  email         String          @unique
  password      String
  role          Role            @default(USER)
  phone_number  String?
  address       String?
  imageUrl      String?
  imageId       String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  recycleItem   RecycleItem[]
  pickupRequest PickupRequest[]
  Session       Session[]
  redemptions   Redemption[]
  points        Int             @default(0)
}

model RecycleItem {
  id          Int      @id @default(autoincrement())
  itemType    String
  description String
  condition   String
  weight      Int
  imageUrl    String?
  imageId     String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  status      Status
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model PickupRequest {
  id                  Int      @id @default(autoincrement())
  user                User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              Int
  pickupAddress       String
  pickupDate          String
  pickupTime          String
  itemsForPickup      String
  specialInstructions String?
  status              Status
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now())
}

model Session {
  id        String   @id @default(cuid())
  userId    Int
  sessionId String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reward {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  points      Int
  imageUrl    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  redemptions Redemption[]
}

model Redemption {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  reward    Reward   @relation(fields: [rewardId], references: [id])
  rewardId  Int
  createdAt DateTime @default(now())
}
